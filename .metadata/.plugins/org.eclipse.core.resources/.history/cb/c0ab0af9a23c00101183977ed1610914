/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include "Stm32F446xx.h"
#include "NVIC_interface.h"
#include "USART_interface.h"
#include "DMA_interface.h"
#include "RCC_interface.h"
#include "errtype.h"
#include "GPIO_interface.h"
#include "SysTick_interface.h"





int main(void)
{


	char my_buffer[] = "Hello via DMA USART2\r\n";
	//char msg[] = "Hello from Nucleo-F446RE USART2!\r\nSend '1' to turn LED ON, '0' to turn LED OFF.\r\n";


	 RCC_SETCLK(HSI,RCC_ON);
	    RCC_SETSYSCLK(SW_HSI);  /* Switch system clock to PLL*/
	    SystemCoreClockUpdate();   /* Update core clock variable*/
	 	SysTick_Init(ProcessorAHB); /* Initialize SysTick with new frequency*/

		RCC_AHB1_enable(GPIOAEN);   /* Enable GPIOA لـ USART2*/
		RCC_AHB1_enable(DMA1EN);      /* DMA1 for USART2 */
		RCC_APB1_enable(USART2EN);  /*     USART2*/


		    pin_configer_t USART2_PA2_TX={
		    .port=PORTA,
		    .pinNum=2,
		    .mode=ALTERNATE_FUNCTION,
			.altfunc=AF7,   //USART2---> AF7
		    .speed=LOW,
		    .outputtype=PUSH_PULL,
		    .pulltype=NOPULL
		    };

		    GPIO_u8pininit(&USART2_PA2_TX);

		    pin_configer_t LED_PA5={
		 		    .port=PORTA,
		 		    .pinNum=5,
		 		    .mode=OUTPUT,

		 		    .speed=LOW,
		 		    .outputtype=PUSH_PULL,
		 		    .pulltype=NOPULL
		 		    };

		 		   GPIO_u8pininit(&LED_PA5);


		    pin_configer_t USART2_PA3_RX={
		    .port=PORTA,
		    .pinNum=3,
			 .mode=ALTERNATE_FUNCTION,
			.altfunc=AF7,
		    .pulltype=PULLUP
		    };

		    GPIO_u8pininit(&USART2_PA3_RX);


		    USART_Init(USART2, 9600, 16000000, 16);
		   //USART_ConfigMode(USART2, TX_ONLY);
		    USART_ConfigMode(USART2, RX_TX);
		   //USART_SendString(USART2, msg);




		   DMA_Config_t dma_config = {
		       .streamID = DMA1_STREAM6,
			   .stream = DMA_GetStreamPtr(DMA1_STREAM6),
		       .channel = DMA_CHANNEL_4,
		       .periphAddr = (uint32_t)&(USART2->DR),
		       .memAddr = (uint32_t)my_buffer,
		       .dataLength = sizeof(my_buffer),
		       .direction = DMA_DIR_MEM_TO_PERIPH,
		       .priority = DMA_PRIORITY_MEDIUM,
		       .msize = DMA_DATA_SIZE_8BIT,
		       .psize = DMA_DATA_SIZE_8BIT,
		       .enableDoubleBuffer = 0,
		       .fifoEnable = DMA_FIFO_DISABLE,
		       .fifoThreshold = DMA_FIFO_THRESHOLD_FULL,
		       .mode = DMA_MODE_NORMAL
		   };
		   DMA_Init(&dma_config);                 //  DMA

		   USART_DMA_StartTx(USART2);
		   // (Optional) Wait for transfer to complete
		   USART_DMA_WaitTxComplete();
		   USART2->CR1 |= RXNEIE;
		   	ENABLE_interrupt( USART2_IRQn);
		   	USART2_IRQHandler();




		   /*

		   GPIO_u8setpinvalue(PORTA, PIN5, PIN_HIGH);
		   for(volatile int i=0; i<1000000; i++);  // تأخير بسيط
		   GPIO_u8setpinvalue(PORTA, PIN5, PIN_LOW);



		    while(1)
		    {
		    	if (USART_GetFlagStatus(USART2, RXNE))
		    	    {
		    	        char c = USART_ReceiveChar(USART2);

		    	        // تجاهل أحرف CRLF (\r و \n)
		    	        if (c == '\r' || c == '\n')
		    	        {
		    	            continue; // تجاهل هذه الأحرف
		    	        }

		    	        // إعادة إرسال الرمز كصدى للتأكد من أن الإدخال مرئي في PuTTY
		    	        USART_SendChar(USART2, c);

		            if(c == '1')
		            {
		                GPIO_u8setpinvalue(PORTA, PIN5, PIN_HIGH);
		                USART_SendString(USART2, "\r\nLED ON\r\n");
		            }
		            else if(c == '0')
		            {
		                GPIO_u8setpinvalue(PORTA, PIN5, PIN_LOW);
		                USART_SendString(USART2, "\r\nLED OFF\r\n");
		            } if (c == '1' && USART_GetFlagStatus(USART2, RXNE)) {
			            GPIO_u8setpinvalue(PORTA, PIN5, PIN_HIGH);
			            USART_SendString(USART2, "\r\nLED ON\r\n");
			        }
		        }
*/





		    }

void USART2_IRQHandler(void){
	   		if (USART2->SR & RXNE) {
	   			char received = USART2->DR;  // قراءة البيانات

	           if (received == '1'){
	        	   GPIO_u8setpinvalue(PORTA, PIN5, PIN_HIGH);
	        	  USART_SendString(USART2, "\r\nLED ON\r\n");
	           }else if (received == '0') {
	        	   GPIO_u8setpinvalue(PORTA, PIN5, PIN_LOW);
	        	 USART_SendString(USART2, "\r\nLED OFF\r\n");

	           }
	       }
	   }










