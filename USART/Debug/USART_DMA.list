
USART_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d10  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08000ed4  08000ed4  00001ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f74  08000f74  00002028  2**0
                  CONTENTS
  4 .ARM          00000000  08000f74  08000f74  00002028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f74  08000f74  00002028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f74  08000f74  00001f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000f78  08000f78  00001f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  08000f7c  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000028  08000fa4  00002028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000048  08000fa4  00002048  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00002028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002728  00000000  00000000  00002052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000990  00000000  00000000  0000477a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000250  00000000  00000000  00005110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001a8  00000000  00000000  00005360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000023b3  00000000  00000000  00005508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002e46  00000000  00000000  000078bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000977b  00000000  00000000  0000a701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00013e7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000008a0  00000000  00000000  00013ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00014760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000028 	.word	0x20000028
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000ebc 	.word	0x08000ebc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000002c 	.word	0x2000002c
 8000200:	08000ebc 	.word	0x08000ebc

08000204 <DMA_Init>:





void DMA_Init(DMA_Config_t* config) {
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
    // Enable clock
    if (config->streamID < DMA2_STREAM0)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	2b07      	cmp	r3, #7
 8000212:	d806      	bhi.n	8000222 <DMA_Init+0x1e>
        RCC->AHB1ENR |= (1 << 21); // DMA1EN
 8000214:	4b4c      	ldr	r3, [pc, #304]	@ (8000348 <DMA_Init+0x144>)
 8000216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000218:	4a4b      	ldr	r2, [pc, #300]	@ (8000348 <DMA_Init+0x144>)
 800021a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800021e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000220:	e005      	b.n	800022e <DMA_Init+0x2a>
    else
        RCC->AHB1ENR |= (1 << 22); // DMA2EN
 8000222:	4b49      	ldr	r3, [pc, #292]	@ (8000348 <DMA_Init+0x144>)
 8000224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000226:	4a48      	ldr	r2, [pc, #288]	@ (8000348 <DMA_Init+0x144>)
 8000228:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800022c:	6313      	str	r3, [r2, #48]	@ 0x30

    // Disable stream
    config->stream->CR &= ~DMA_EN;
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	685b      	ldr	r3, [r3, #4]
 8000232:	681a      	ldr	r2, [r3, #0]
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	685b      	ldr	r3, [r3, #4]
 8000238:	f022 0201 	bic.w	r2, r2, #1
 800023c:	601a      	str	r2, [r3, #0]
    while (config->stream->CR & DMA_EN);
 800023e:	bf00      	nop
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	685b      	ldr	r3, [r3, #4]
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	f003 0301 	and.w	r3, r3, #1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d1f8      	bne.n	8000240 <DMA_Init+0x3c>

    // Set addresses
    config->stream->PAR  = config->periphAddr;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	685b      	ldr	r3, [r3, #4]
 8000252:	687a      	ldr	r2, [r7, #4]
 8000254:	6892      	ldr	r2, [r2, #8]
 8000256:	609a      	str	r2, [r3, #8]
    config->stream->M0AR = config->memAddr;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	685b      	ldr	r3, [r3, #4]
 800025c:	687a      	ldr	r2, [r7, #4]
 800025e:	68d2      	ldr	r2, [r2, #12]
 8000260:	60da      	str	r2, [r3, #12]
    config->stream->NDTR = config->dataLength;
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	685b      	ldr	r3, [r3, #4]
 8000266:	687a      	ldr	r2, [r7, #4]
 8000268:	6952      	ldr	r2, [r2, #20]
 800026a:	605a      	str	r2, [r3, #4]

    if (config->enableDoubleBuffer) {
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8000272:	2b00      	cmp	r3, #0
 8000274:	d00c      	beq.n	8000290 <DMA_Init+0x8c>
        config->stream->M1AR = config->mem1Addr;
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	685b      	ldr	r3, [r3, #4]
 800027a:	687a      	ldr	r2, [r7, #4]
 800027c:	6912      	ldr	r2, [r2, #16]
 800027e:	611a      	str	r2, [r3, #16]
        config->stream->CR |= (1 << 18); // DBM
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	685b      	ldr	r3, [r3, #4]
 8000284:	681a      	ldr	r2, [r3, #0]
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	685b      	ldr	r3, [r3, #4]
 800028a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800028e:	601a      	str	r2, [r3, #0]
    }

    // FIFO config
    if (config->fifoEnable == DMA_FIFO_ENABLE) {
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8000296:	2b01      	cmp	r3, #1
 8000298:	d109      	bne.n	80002ae <DMA_Init+0xaa>
        config->stream->FCR = (1 << 2) | config->fifoThreshold;
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80002a0:	f043 0304 	orr.w	r3, r3, #4
 80002a4:	b2da      	uxtb	r2, r3
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	685b      	ldr	r3, [r3, #4]
 80002aa:	615a      	str	r2, [r3, #20]
 80002ac:	e003      	b.n	80002b6 <DMA_Init+0xb2>
    } else {
        config->stream->FCR = 0;
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	685b      	ldr	r3, [r3, #4]
 80002b2:	2200      	movs	r2, #0
 80002b4:	615a      	str	r2, [r3, #20]
    }


    // Mode bits
    uint32_t mode_bits = (config->mode == DMA_MODE_CIRCULAR) ? DMA_CIRC_ENABLE : 0;
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80002bc:	2b01      	cmp	r3, #1
 80002be:	d102      	bne.n	80002c6 <DMA_Init+0xc2>
 80002c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002c4:	e000      	b.n	80002c8 <DMA_Init+0xc4>
 80002c6:	2300      	movs	r3, #0
 80002c8:	60fb      	str	r3, [r7, #12]

    // Clear old channel bits first, then set channel
    config->stream->CR &= ~(0x7 << 25);
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	685b      	ldr	r3, [r3, #4]
 80002ce:	681a      	ldr	r2, [r3, #0]
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	685b      	ldr	r3, [r3, #4]
 80002d4:	f022 6260 	bic.w	r2, r2, #234881024	@ 0xe000000
 80002d8:	601a      	str	r2, [r3, #0]
    config->stream->CR |= config->channel;
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	685b      	ldr	r3, [r3, #4]
 80002de:	6819      	ldr	r1, [r3, #0]
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	685b      	ldr	r3, [r3, #4]
 80002e8:	430a      	orrs	r2, r1
 80002ea:	601a      	str	r2, [r3, #0]

    // Final CR config
    config->stream->CR |=
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	685b      	ldr	r3, [r3, #4]
 80002f0:	681a      	ldr	r2, [r3, #0]
        config->direction |
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	7e1b      	ldrb	r3, [r3, #24]
 80002f6:	4619      	mov	r1, r3
        (config->msize << 13) |
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80002fe:	035b      	lsls	r3, r3, #13
        config->direction |
 8000300:	4319      	orrs	r1, r3
        (config->psize << 11) |
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000308:	02db      	lsls	r3, r3, #11
        (config->msize << 13) |
 800030a:	430b      	orrs	r3, r1
 800030c:	4619      	mov	r1, r3
        config->priority |
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	69db      	ldr	r3, [r3, #28]
        (config->psize << 11) |
 8000312:	4319      	orrs	r1, r3
        DMA_MINC_ENABLE |
        DMA_TCIE_ENABLE |
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	430b      	orrs	r3, r1
    config->stream->CR |=
 8000318:	431a      	orrs	r2, r3
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	685b      	ldr	r3, [r3, #4]
 800031e:	f442 6282 	orr.w	r2, r2, #1040	@ 0x410
 8000322:	601a      	str	r2, [r3, #0]
        mode_bits;

    // Enable interrupt
    Enable_DMA_IRQ(config->streamID);
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	4618      	mov	r0, r3
 800032a:	f000 f80f 	bl	800034c <Enable_DMA_IRQ>

    // Enable stream
    config->stream->CR |= DMA_EN;
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	685b      	ldr	r3, [r3, #4]
 8000332:	681a      	ldr	r2, [r3, #0]
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	685b      	ldr	r3, [r3, #4]
 8000338:	f042 0201 	orr.w	r2, r2, #1
 800033c:	601a      	str	r2, [r3, #0]
}
 800033e:	bf00      	nop
 8000340:	3710      	adds	r7, #16
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	40023800 	.word	0x40023800

0800034c <Enable_DMA_IRQ>:




void Enable_DMA_IRQ(DMA_StreamID_t streamID)
{
 800034c:	b480      	push	{r7}
 800034e:	b085      	sub	sp, #20
 8000350:	af00      	add	r7, sp, #0
 8000352:	4603      	mov	r3, r0
 8000354:	71fb      	strb	r3, [r7, #7]
        11, 12, 13, 14, 15, 16, 17, 47, /* DMA1 Stream 0 to 7 */
        56, 57, 58, 59, 60, 68, 69, 70  /* DMA2 Stream 0 to 7 */
    };

    /* Check if streamID is valid */
    if (streamID >= DMA1_STREAM0 && streamID <= DMA2_STREAM7)
 8000356:	79fb      	ldrb	r3, [r7, #7]
 8000358:	2b0f      	cmp	r3, #15
 800035a:	d818      	bhi.n	800038e <Enable_DMA_IRQ+0x42>
    {
        /* Calculate the ISER register index (each ISER handles 32 interrupts) */
        uint32_t reg_index = DMA_IRQn[streamID] / 32;
 800035c:	79fb      	ldrb	r3, [r7, #7]
 800035e:	4a0e      	ldr	r2, [pc, #56]	@ (8000398 <Enable_DMA_IRQ+0x4c>)
 8000360:	5cd3      	ldrb	r3, [r2, r3]
 8000362:	095b      	lsrs	r3, r3, #5
 8000364:	b2db      	uxtb	r3, r3
 8000366:	60fb      	str	r3, [r7, #12]
        uint32_t bit_offset = DMA_IRQn[streamID] % 32;
 8000368:	79fb      	ldrb	r3, [r7, #7]
 800036a:	4a0b      	ldr	r2, [pc, #44]	@ (8000398 <Enable_DMA_IRQ+0x4c>)
 800036c:	5cd3      	ldrb	r3, [r2, r3]
 800036e:	f003 031f 	and.w	r3, r3, #31
 8000372:	60bb      	str	r3, [r7, #8]

        /* Set the corresponding bit in ISER to enable the interrupt */
        NVIC->ISER[reg_index] |= (1U << bit_offset);
 8000374:	4a09      	ldr	r2, [pc, #36]	@ (800039c <Enable_DMA_IRQ+0x50>)
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800037c:	2101      	movs	r1, #1
 800037e:	68bb      	ldr	r3, [r7, #8]
 8000380:	fa01 f303 	lsl.w	r3, r1, r3
 8000384:	4905      	ldr	r1, [pc, #20]	@ (800039c <Enable_DMA_IRQ+0x50>)
 8000386:	431a      	orrs	r2, r3
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    /* Optional: Handle invalid streamID */
    /* else {
        // Error handling (e.g., assert or debug print)
    } */
}
 800038e:	bf00      	nop
 8000390:	3714      	adds	r7, #20
 8000392:	46bd      	mov	sp, r7
 8000394:	bc80      	pop	{r7}
 8000396:	4770      	bx	lr
 8000398:	08000f64 	.word	0x08000f64
 800039c:	e000e100 	.word	0xe000e100

080003a0 <DMA_EnableStream>:
}



void DMA_EnableStream(DMA_StreamID_t streamID)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b085      	sub	sp, #20
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	4603      	mov	r3, r0
 80003a8:	71fb      	strb	r3, [r7, #7]
    DMA_RegDef *DMAx;
    uint8_t stream_number;

    if (streamID <= DMA1_STREAM7) {
 80003aa:	79fb      	ldrb	r3, [r7, #7]
 80003ac:	2b07      	cmp	r3, #7
 80003ae:	d804      	bhi.n	80003ba <DMA_EnableStream+0x1a>
        DMAx = MY_DMA1;
 80003b0:	4b17      	ldr	r3, [pc, #92]	@ (8000410 <DMA_EnableStream+0x70>)
 80003b2:	60fb      	str	r3, [r7, #12]
        stream_number = streamID;
 80003b4:	79fb      	ldrb	r3, [r7, #7]
 80003b6:	72fb      	strb	r3, [r7, #11]
 80003b8:	e004      	b.n	80003c4 <DMA_EnableStream+0x24>
    } else {
        DMAx = MY_DMA2;
 80003ba:	4b16      	ldr	r3, [pc, #88]	@ (8000414 <DMA_EnableStream+0x74>)
 80003bc:	60fb      	str	r3, [r7, #12]
        stream_number = streamID - DMA2_STREAM0;
 80003be:	79fb      	ldrb	r3, [r7, #7]
 80003c0:	3b08      	subs	r3, #8
 80003c2:	72fb      	strb	r3, [r7, #11]
    }

    // Clear interrupt flags (you can adjust the mask)
    DMAx->HIFCR = 0x3D << ((stream_number % 4) * 6);
 80003c4:	7afb      	ldrb	r3, [r7, #11]
 80003c6:	f003 0203 	and.w	r2, r3, #3
 80003ca:	4613      	mov	r3, r2
 80003cc:	005b      	lsls	r3, r3, #1
 80003ce:	4413      	add	r3, r2
 80003d0:	005b      	lsls	r3, r3, #1
 80003d2:	461a      	mov	r2, r3
 80003d4:	233d      	movs	r3, #61	@ 0x3d
 80003d6:	4093      	lsls	r3, r2
 80003d8:	461a      	mov	r2, r3
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	60da      	str	r2, [r3, #12]

    // Enable the stream
    DMAx->DMA_Stream[stream_number].CR |= (1 << 0); // Bit 0 = EN
 80003de:	7afa      	ldrb	r2, [r7, #11]
 80003e0:	68f9      	ldr	r1, [r7, #12]
 80003e2:	4613      	mov	r3, r2
 80003e4:	005b      	lsls	r3, r3, #1
 80003e6:	4413      	add	r3, r2
 80003e8:	00db      	lsls	r3, r3, #3
 80003ea:	440b      	add	r3, r1
 80003ec:	3310      	adds	r3, #16
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	7afa      	ldrb	r2, [r7, #11]
 80003f2:	f043 0101 	orr.w	r1, r3, #1
 80003f6:	68f8      	ldr	r0, [r7, #12]
 80003f8:	4613      	mov	r3, r2
 80003fa:	005b      	lsls	r3, r3, #1
 80003fc:	4413      	add	r3, r2
 80003fe:	00db      	lsls	r3, r3, #3
 8000400:	4403      	add	r3, r0
 8000402:	3310      	adds	r3, #16
 8000404:	6019      	str	r1, [r3, #0]
}
 8000406:	bf00      	nop
 8000408:	3714      	adds	r7, #20
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr
 8000410:	40026000 	.word	0x40026000
 8000414:	40026400 	.word	0x40026400

08000418 <GPIO_u8pininit>:
 * @retval

*/

uint8_t GPIO_u8pininit(const pin_configer_t* pin_config)
{
 8000418:	b480      	push	{r7}
 800041a:	b085      	sub	sp, #20
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
	uint8_t local_u8errorstate=OK;
 8000420:	2301      	movs	r3, #1
 8000422:	73fb      	strb	r3, [r7, #15]
	if(pin_config   != NULL ){
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	2b00      	cmp	r3, #0
 8000428:	f000 8130 	beq.w	800068c <GPIO_u8pininit+0x274>
		if((pin_config -> port <=  PORTH) && (pin_config -> pinNum <=  PIN15)
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	2b07      	cmp	r3, #7
 8000432:	f200 8128 	bhi.w	8000686 <GPIO_u8pininit+0x26e>
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	785b      	ldrb	r3, [r3, #1]
 800043a:	2b0f      	cmp	r3, #15
 800043c:	f200 8123 	bhi.w	8000686 <GPIO_u8pininit+0x26e>
				&& (pin_config -> mode <=  ANALOG)&& (pin_config -> speed <=  HIGH )
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	789b      	ldrb	r3, [r3, #2]
 8000444:	2b03      	cmp	r3, #3
 8000446:	f200 811e 	bhi.w	8000686 <GPIO_u8pininit+0x26e>
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	78db      	ldrb	r3, [r3, #3]
 800044e:	2b03      	cmp	r3, #3
 8000450:	f200 8119 	bhi.w	8000686 <GPIO_u8pininit+0x26e>
				&& (pin_config -> outputtype <=  OPEN_DEAIN )&& (pin_config -> pulltype <=  PULLDOWN )
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	791b      	ldrb	r3, [r3, #4]
 8000458:	2b01      	cmp	r3, #1
 800045a:	f200 8114 	bhi.w	8000686 <GPIO_u8pininit+0x26e>
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	795b      	ldrb	r3, [r3, #5]
 8000462:	2b02      	cmp	r3, #2
 8000464:	f200 810f 	bhi.w	8000686 <GPIO_u8pininit+0x26e>
				&& (pin_config -> altfunc <=  AF15 ))
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	799b      	ldrb	r3, [r3, #6]
 800046c:	2b0f      	cmp	r3, #15
 800046e:	f200 810a 	bhi.w	8000686 <GPIO_u8pininit+0x26e>
		{
			/*select  GPIO port mode register (GPIOx_MODER) (: Input: output : Alternate function : Analog*/
			/*clear mode bits 0b11      */
			(GPIOPORT[pin_config -> port]->MODER) &=~(MODER_MASK << ((pin_config -> pinNum) * MODER_PIN_ACSESS ) );
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	461a      	mov	r2, r3
 8000478:	4b89      	ldr	r3, [pc, #548]	@ (80006a0 <GPIO_u8pininit+0x288>)
 800047a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800047e:	681a      	ldr	r2, [r3, #0]
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	785b      	ldrb	r3, [r3, #1]
 8000484:	005b      	lsls	r3, r3, #1
 8000486:	2103      	movs	r1, #3
 8000488:	fa01 f303 	lsl.w	r3, r1, r3
 800048c:	43db      	mvns	r3, r3
 800048e:	4619      	mov	r1, r3
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	4618      	mov	r0, r3
 8000496:	4b82      	ldr	r3, [pc, #520]	@ (80006a0 <GPIO_u8pininit+0x288>)
 8000498:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800049c:	400a      	ands	r2, r1
 800049e:	601a      	str	r2, [r3, #0]

			(GPIOPORT[pin_config -> port]->MODER) |= ((pin_config -> mode)<<(pin_config -> pinNum) * MODER_PIN_ACSESS );
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	461a      	mov	r2, r3
 80004a6:	4b7e      	ldr	r3, [pc, #504]	@ (80006a0 <GPIO_u8pininit+0x288>)
 80004a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004ac:	681a      	ldr	r2, [r3, #0]
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	789b      	ldrb	r3, [r3, #2]
 80004b2:	4619      	mov	r1, r3
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	785b      	ldrb	r3, [r3, #1]
 80004b8:	005b      	lsls	r3, r3, #1
 80004ba:	fa01 f303 	lsl.w	r3, r1, r3
 80004be:	4619      	mov	r1, r3
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	4618      	mov	r0, r3
 80004c6:	4b76      	ldr	r3, [pc, #472]	@ (80006a0 <GPIO_u8pininit+0x288>)
 80004c8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80004cc:	430a      	orrs	r2, r1
 80004ce:	601a      	str	r2, [r3, #0]
			/*select  GPIO pull up-down---no pull set pin used  output -input -Alternate -function*/

			(GPIOPORT[pin_config -> port]->PUPDR) &=~(PUPDR_MASK << ((pin_config -> pinNum) * PUPDR_PIN_ACSESS ) );
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	461a      	mov	r2, r3
 80004d6:	4b72      	ldr	r3, [pc, #456]	@ (80006a0 <GPIO_u8pininit+0x288>)
 80004d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004dc:	68da      	ldr	r2, [r3, #12]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	785b      	ldrb	r3, [r3, #1]
 80004e2:	005b      	lsls	r3, r3, #1
 80004e4:	2103      	movs	r1, #3
 80004e6:	fa01 f303 	lsl.w	r3, r1, r3
 80004ea:	43db      	mvns	r3, r3
 80004ec:	4619      	mov	r1, r3
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	4618      	mov	r0, r3
 80004f4:	4b6a      	ldr	r3, [pc, #424]	@ (80006a0 <GPIO_u8pininit+0x288>)
 80004f6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80004fa:	400a      	ands	r2, r1
 80004fc:	60da      	str	r2, [r3, #12]

			(GPIOPORT[pin_config -> port]->PUPDR) |= ((pin_config -> pulltype)<<(pin_config -> pinNum) * PUPDR_PIN_ACSESS );
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	461a      	mov	r2, r3
 8000504:	4b66      	ldr	r3, [pc, #408]	@ (80006a0 <GPIO_u8pininit+0x288>)
 8000506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800050a:	68da      	ldr	r2, [r3, #12]
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	795b      	ldrb	r3, [r3, #5]
 8000510:	4619      	mov	r1, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	785b      	ldrb	r3, [r3, #1]
 8000516:	005b      	lsls	r3, r3, #1
 8000518:	fa01 f303 	lsl.w	r3, r1, r3
 800051c:	4619      	mov	r1, r3
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	4618      	mov	r0, r3
 8000524:	4b5e      	ldr	r3, [pc, #376]	@ (80006a0 <GPIO_u8pininit+0x288>)
 8000526:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800052a:	430a      	orrs	r2, r1
 800052c:	60da      	str	r2, [r3, #12]

			/*select GPIO port output speed register----> pin output or Alternate  function  */
			if((pin_config  -> mode == OUTPUT)    || (pin_config  -> mode == ALTERNATE_FUNCTION)){
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	789b      	ldrb	r3, [r3, #2]
 8000532:	2b01      	cmp	r3, #1
 8000534:	d004      	beq.n	8000540 <GPIO_u8pininit+0x128>
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	789b      	ldrb	r3, [r3, #2]
 800053a:	2b02      	cmp	r3, #2
 800053c:	f040 80a9 	bne.w	8000692 <GPIO_u8pininit+0x27a>
				/*select output type register  0: Output push-pull - 1: Output open-drain */
				(GPIOPORT[pin_config -> port]->OTYPER) &=~(OTYPER_MASK << (pin_config -> pinNum)  );  /*clear mode bits 0b1      */
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	461a      	mov	r2, r3
 8000546:	4b56      	ldr	r3, [pc, #344]	@ (80006a0 <GPIO_u8pininit+0x288>)
 8000548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800054c:	685a      	ldr	r2, [r3, #4]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	785b      	ldrb	r3, [r3, #1]
 8000552:	4619      	mov	r1, r3
 8000554:	2301      	movs	r3, #1
 8000556:	408b      	lsls	r3, r1
 8000558:	43db      	mvns	r3, r3
 800055a:	4619      	mov	r1, r3
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	4618      	mov	r0, r3
 8000562:	4b4f      	ldr	r3, [pc, #316]	@ (80006a0 <GPIO_u8pininit+0x288>)
 8000564:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000568:	400a      	ands	r2, r1
 800056a:	605a      	str	r2, [r3, #4]

				(GPIOPORT[pin_config -> port]->OTYPER) |= ((pin_config -> outputtype)<<(pin_config -> pinNum)  );
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	461a      	mov	r2, r3
 8000572:	4b4b      	ldr	r3, [pc, #300]	@ (80006a0 <GPIO_u8pininit+0x288>)
 8000574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000578:	685a      	ldr	r2, [r3, #4]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	791b      	ldrb	r3, [r3, #4]
 800057e:	4619      	mov	r1, r3
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	785b      	ldrb	r3, [r3, #1]
 8000584:	fa01 f303 	lsl.w	r3, r1, r3
 8000588:	4619      	mov	r1, r3
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	4618      	mov	r0, r3
 8000590:	4b43      	ldr	r3, [pc, #268]	@ (80006a0 <GPIO_u8pininit+0x288>)
 8000592:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000596:	430a      	orrs	r2, r1
 8000598:	605a      	str	r2, [r3, #4]

				/*GPIO port output speed register (GPIOx_OSPEEDR) 00:Low speed---  01:Medium speed--- 10:Fast speed--- 11:High speed*/

				(GPIOPORT[pin_config -> port]->OSPEEDER) &=~(OSPEEDER_MASK << ((pin_config -> pinNum) * OSPEEDER_PIN_ACSESS ) );
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	461a      	mov	r2, r3
 80005a0:	4b3f      	ldr	r3, [pc, #252]	@ (80006a0 <GPIO_u8pininit+0x288>)
 80005a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005a6:	689a      	ldr	r2, [r3, #8]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	785b      	ldrb	r3, [r3, #1]
 80005ac:	005b      	lsls	r3, r3, #1
 80005ae:	2103      	movs	r1, #3
 80005b0:	fa01 f303 	lsl.w	r3, r1, r3
 80005b4:	43db      	mvns	r3, r3
 80005b6:	4619      	mov	r1, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	4618      	mov	r0, r3
 80005be:	4b38      	ldr	r3, [pc, #224]	@ (80006a0 <GPIO_u8pininit+0x288>)
 80005c0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80005c4:	400a      	ands	r2, r1
 80005c6:	609a      	str	r2, [r3, #8]

				(GPIOPORT[pin_config -> port]->OSPEEDER) |= ((pin_config -> speed)<<(pin_config -> pinNum) * OSPEEDER_PIN_ACSESS );
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	461a      	mov	r2, r3
 80005ce:	4b34      	ldr	r3, [pc, #208]	@ (80006a0 <GPIO_u8pininit+0x288>)
 80005d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005d4:	689a      	ldr	r2, [r3, #8]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	78db      	ldrb	r3, [r3, #3]
 80005da:	4619      	mov	r1, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	785b      	ldrb	r3, [r3, #1]
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	fa01 f303 	lsl.w	r3, r1, r3
 80005e6:	4619      	mov	r1, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	4618      	mov	r0, r3
 80005ee:	4b2c      	ldr	r3, [pc, #176]	@ (80006a0 <GPIO_u8pininit+0x288>)
 80005f0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80005f4:	430a      	orrs	r2, r1
 80005f6:	609a      	str	r2, [r3, #8]


				if(pin_config  -> mode == ALTERNATE_FUNCTION){
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	789b      	ldrb	r3, [r3, #2]
 80005fc:	2b02      	cmp	r3, #2
 80005fe:	d148      	bne.n	8000692 <GPIO_u8pininit+0x27a>
					/*select alternate function register   */
									uint8_t local_u8regnam=(pin_config -> pinNum) /AFR_PIN_SHIFTING ;  /* SELECT   AFRL ==0 OR  AFRH==1     /AFR_PIN_SHIFTING ==8*/
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	785b      	ldrb	r3, [r3, #1]
 8000604:	08db      	lsrs	r3, r3, #3
 8000606:	73bb      	strb	r3, [r7, #14]
									uint8_t local_u8bitnam=(pin_config -> pinNum) %AFR_PIN_SHIFTING ;  /*NUM BIT alternate function register AFRL  OR AFRH*/
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	785b      	ldrb	r3, [r3, #1]
 800060c:	f003 0307 	and.w	r3, r3, #7
 8000610:	737b      	strb	r3, [r7, #13]
									(GPIOPORT[pin_config -> port]->AFR[local_u8regnam]) &=~(AFR_MASK << ((local_u8bitnam) * AFR_PIN_ACSESS ) );
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	461a      	mov	r2, r3
 8000618:	4b21      	ldr	r3, [pc, #132]	@ (80006a0 <GPIO_u8pininit+0x288>)
 800061a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800061e:	7bba      	ldrb	r2, [r7, #14]
 8000620:	3208      	adds	r2, #8
 8000622:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000626:	7b7b      	ldrb	r3, [r7, #13]
 8000628:	009b      	lsls	r3, r3, #2
 800062a:	220f      	movs	r2, #15
 800062c:	fa02 f303 	lsl.w	r3, r2, r3
 8000630:	43db      	mvns	r3, r3
 8000632:	4618      	mov	r0, r3
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	461a      	mov	r2, r3
 800063a:	4b19      	ldr	r3, [pc, #100]	@ (80006a0 <GPIO_u8pininit+0x288>)
 800063c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000640:	7bba      	ldrb	r2, [r7, #14]
 8000642:	4001      	ands	r1, r0
 8000644:	3208      	adds	r2, #8
 8000646:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

									(GPIOPORT[pin_config -> port]->AFR[local_u8regnam]) |= ((pin_config -> altfunc)<<(local_u8bitnam) * AFR_PIN_ACSESS );
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	461a      	mov	r2, r3
 8000650:	4b13      	ldr	r3, [pc, #76]	@ (80006a0 <GPIO_u8pininit+0x288>)
 8000652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000656:	7bba      	ldrb	r2, [r7, #14]
 8000658:	3208      	adds	r2, #8
 800065a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	799b      	ldrb	r3, [r3, #6]
 8000662:	461a      	mov	r2, r3
 8000664:	7b7b      	ldrb	r3, [r7, #13]
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	fa02 f303 	lsl.w	r3, r2, r3
 800066c:	4618      	mov	r0, r3
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	461a      	mov	r2, r3
 8000674:	4b0a      	ldr	r3, [pc, #40]	@ (80006a0 <GPIO_u8pininit+0x288>)
 8000676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800067a:	7bba      	ldrb	r2, [r7, #14]
 800067c:	4301      	orrs	r1, r0
 800067e:	3208      	adds	r2, #8
 8000680:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			if((pin_config  -> mode == OUTPUT)    || (pin_config  -> mode == ALTERNATE_FUNCTION)){
 8000684:	e005      	b.n	8000692 <GPIO_u8pininit+0x27a>
				}

			}

		}else{
			local_u8errorstate=NOK;
 8000686:	2302      	movs	r3, #2
 8000688:	73fb      	strb	r3, [r7, #15]
 800068a:	e003      	b.n	8000694 <GPIO_u8pininit+0x27c>
		}


	}else{
		local_u8errorstate=NULL_PTR_ERR ;
 800068c:	2303      	movs	r3, #3
 800068e:	73fb      	strb	r3, [r7, #15]
 8000690:	e000      	b.n	8000694 <GPIO_u8pininit+0x27c>
			if((pin_config  -> mode == OUTPUT)    || (pin_config  -> mode == ALTERNATE_FUNCTION)){
 8000692:	bf00      	nop
	}

	return local_u8errorstate;
 8000694:	7bfb      	ldrb	r3, [r7, #15]

}
 8000696:	4618      	mov	r0, r3
 8000698:	3714      	adds	r7, #20
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr
 80006a0:	20000000 	.word	0x20000000

080006a4 <GPIO_u8setpinvalue>:
 *  @param[aut]  pinval
 * @retval

*/

uint8_t GPIO_u8setpinvalue(port_t port,pin_t pinNum,pinval_t pinval){
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	71fb      	strb	r3, [r7, #7]
 80006ae:	460b      	mov	r3, r1
 80006b0:	71bb      	strb	r3, [r7, #6]
 80006b2:	4613      	mov	r3, r2
 80006b4:	717b      	strb	r3, [r7, #5]

	uint8_t local_u8errorstate=OK;
 80006b6:	2301      	movs	r3, #1
 80006b8:	73fb      	strb	r3, [r7, #15]

	if(( port <=  PORTH) && (pinNum <=  PIN15))
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	2b07      	cmp	r3, #7
 80006be:	d82e      	bhi.n	800071e <GPIO_u8setpinvalue+0x7a>
 80006c0:	79bb      	ldrb	r3, [r7, #6]
 80006c2:	2b0f      	cmp	r3, #15
 80006c4:	d82b      	bhi.n	800071e <GPIO_u8setpinvalue+0x7a>
	{

		if(pinval == PIN_LOW){
 80006c6:	797b      	ldrb	r3, [r7, #5]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d111      	bne.n	80006f0 <GPIO_u8setpinvalue+0x4c>
			GPIOPORT[port]->ODR &=~  (1<<pinNum);
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	4a18      	ldr	r2, [pc, #96]	@ (8000730 <GPIO_u8setpinvalue+0x8c>)
 80006d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006d4:	695a      	ldr	r2, [r3, #20]
 80006d6:	79bb      	ldrb	r3, [r7, #6]
 80006d8:	2101      	movs	r1, #1
 80006da:	fa01 f303 	lsl.w	r3, r1, r3
 80006de:	43db      	mvns	r3, r3
 80006e0:	4618      	mov	r0, r3
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	4912      	ldr	r1, [pc, #72]	@ (8000730 <GPIO_u8setpinvalue+0x8c>)
 80006e6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80006ea:	4002      	ands	r2, r0
 80006ec:	615a      	str	r2, [r3, #20]
		if(pinval == PIN_LOW){
 80006ee:	e018      	b.n	8000722 <GPIO_u8setpinvalue+0x7e>
			/* port bit set/reset register (GPIOx_BSRR)  15BIT ==1PIN ==--31 BIT==PIN15 */
			/*  GPIOPORT[port]->BSRR |= 1<<(pinNum+16) */

		}else if(pinval==PIN_HIGH){
 80006f0:	797b      	ldrb	r3, [r7, #5]
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	d110      	bne.n	8000718 <GPIO_u8setpinvalue+0x74>

			GPIOPORT[port]->ODR |=   (1<<pinNum);
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000730 <GPIO_u8setpinvalue+0x8c>)
 80006fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006fe:	695a      	ldr	r2, [r3, #20]
 8000700:	79bb      	ldrb	r3, [r7, #6]
 8000702:	2101      	movs	r1, #1
 8000704:	fa01 f303 	lsl.w	r3, r1, r3
 8000708:	4618      	mov	r0, r3
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	4908      	ldr	r1, [pc, #32]	@ (8000730 <GPIO_u8setpinvalue+0x8c>)
 800070e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000712:	4302      	orrs	r2, r0
 8000714:	615a      	str	r2, [r3, #20]
		if(pinval == PIN_LOW){
 8000716:	e004      	b.n	8000722 <GPIO_u8setpinvalue+0x7e>
			/* port bit set/reset register (GPIOx_BSRR)  0BIT ==1PIN ==--15 BIT==PIN15 */
						/*  GPIOPORT[port]->BSRR |= 1<<pinNum */

		}else{
			local_u8errorstate=NOK;
 8000718:	2302      	movs	r3, #2
 800071a:	73fb      	strb	r3, [r7, #15]
		if(pinval == PIN_LOW){
 800071c:	e001      	b.n	8000722 <GPIO_u8setpinvalue+0x7e>
		}

	}else{
		local_u8errorstate=NOK;
 800071e:	2302      	movs	r3, #2
 8000720:	73fb      	strb	r3, [r7, #15]

	}


	return local_u8errorstate;
 8000722:	7bfb      	ldrb	r3, [r7, #15]

}
 8000724:	4618      	mov	r0, r3
 8000726:	3714      	adds	r7, #20
 8000728:	46bd      	mov	sp, r7
 800072a:	bc80      	pop	{r7}
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	20000000 	.word	0x20000000

08000734 <RCC_SETCLK>:
uint32_t SystemCoreClock = 16000000; // Or your system core clock value.


/*****************RCC SET CLocK*************selected enable as system clock  OR TIMEOUT*****************************/
uint8_t RCC_SETCLK(uint8_t CLKtype, uint8_t CLKstatus)
{
 8000734:	b480      	push	{r7}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	460a      	mov	r2, r1
 800073e:	71fb      	strb	r3, [r7, #7]
 8000740:	4613      	mov	r3, r2
 8000742:	71bb      	strb	r3, [r7, #6]
    uint8_t RCC_ERRORSTATUS = RCC_ERRORSTATUS_OK; // Default error status==0
 8000744:	2300      	movs	r3, #0
 8000746:	73fb      	strb	r3, [r7, #15]
    uint32_t TIME = TIMEOUT;                     // Timeout counter
 8000748:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800074c:	60bb      	str	r3, [r7, #8]
    switch (CLKtype)
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	2b02      	cmp	r3, #2
 8000752:	d042      	beq.n	80007da <RCC_SETCLK+0xa6>
 8000754:	2b02      	cmp	r3, #2
 8000756:	dc5e      	bgt.n	8000816 <RCC_SETCLK+0xe2>
 8000758:	2b00      	cmp	r3, #0
 800075a:	d002      	beq.n	8000762 <RCC_SETCLK+0x2e>
 800075c:	2b01      	cmp	r3, #1
 800075e:	d01e      	beq.n	800079e <RCC_SETCLK+0x6a>
 8000760:	e059      	b.n	8000816 <RCC_SETCLK+0xe2>
    {
		case HSI:
		{
			if (CLKstatus == RCC_ON)
 8000762:	79bb      	ldrb	r3, [r7, #6]
 8000764:	2b01      	cmp	r3, #1
 8000766:	d113      	bne.n	8000790 <RCC_SETCLK+0x5c>
			{
				//SET_BIT ((RCC->CR), HSION);
				RCC->CR |= (1 << HSION); // Enable HSI
 8000768:	4b34      	ldr	r3, [pc, #208]	@ (800083c <RCC_SETCLK+0x108>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a33      	ldr	r2, [pc, #204]	@ (800083c <RCC_SETCLK+0x108>)
 800076e:	f043 0301 	orr.w	r3, r3, #1
 8000772:	6013      	str	r3, [r2, #0]
				while (((RCC->CR & (1 << HSIRDY)) == RCC_OFF) && (--TIME)); // Wait for HSI to stabilize
 8000774:	bf00      	nop
 8000776:	4b31      	ldr	r3, [pc, #196]	@ (800083c <RCC_SETCLK+0x108>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f003 0302 	and.w	r3, r3, #2
 800077e:	2b00      	cmp	r3, #0
 8000780:	d14c      	bne.n	800081c <RCC_SETCLK+0xe8>
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	3b01      	subs	r3, #1
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d1f3      	bne.n	8000776 <RCC_SETCLK+0x42>
			{
				RCC->CR &= ~(1 << HSION); // Disable HSI
	        	//CLR_BIT ((RCC->CR), HSION);

			}
			break;
 800078e:	e045      	b.n	800081c <RCC_SETCLK+0xe8>
				RCC->CR &= ~(1 << HSION); // Disable HSI
 8000790:	4b2a      	ldr	r3, [pc, #168]	@ (800083c <RCC_SETCLK+0x108>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a29      	ldr	r2, [pc, #164]	@ (800083c <RCC_SETCLK+0x108>)
 8000796:	f023 0301 	bic.w	r3, r3, #1
 800079a:	6013      	str	r3, [r2, #0]
			break;
 800079c:	e03e      	b.n	800081c <RCC_SETCLK+0xe8>
		}
		case HSE:
		{
			if (CLKstatus == RCC_ON)
 800079e:	79bb      	ldrb	r3, [r7, #6]
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d113      	bne.n	80007cc <RCC_SETCLK+0x98>
			{
				RCC->CR |= (1 << HSEON); // Enable HSE
 80007a4:	4b25      	ldr	r3, [pc, #148]	@ (800083c <RCC_SETCLK+0x108>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a24      	ldr	r2, [pc, #144]	@ (800083c <RCC_SETCLK+0x108>)
 80007aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80007ae:	6013      	str	r3, [r2, #0]
				while (((RCC->CR & (1 << HSERDY)) == RCC_OFF) && (--TIME)); // Wait for HSI to stabilize
 80007b0:	bf00      	nop
 80007b2:	4b22      	ldr	r3, [pc, #136]	@ (800083c <RCC_SETCLK+0x108>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d130      	bne.n	8000820 <RCC_SETCLK+0xec>
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	3b01      	subs	r3, #1
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d1f3      	bne.n	80007b2 <RCC_SETCLK+0x7e>
			}
			else
			{
				RCC->CR &= ~(1 << HSEON); // Disable HSE
			}
			break;
 80007ca:	e029      	b.n	8000820 <RCC_SETCLK+0xec>
				RCC->CR &= ~(1 << HSEON); // Disable HSE
 80007cc:	4b1b      	ldr	r3, [pc, #108]	@ (800083c <RCC_SETCLK+0x108>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a1a      	ldr	r2, [pc, #104]	@ (800083c <RCC_SETCLK+0x108>)
 80007d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80007d6:	6013      	str	r3, [r2, #0]
			break;
 80007d8:	e022      	b.n	8000820 <RCC_SETCLK+0xec>
		}
		case PLL:
		{
			if (CLKstatus == RCC_ON)
 80007da:	79bb      	ldrb	r3, [r7, #6]
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d113      	bne.n	8000808 <RCC_SETCLK+0xd4>
			{

				RCC->CR |= (1 << PLLON); // Enable PLL
 80007e0:	4b16      	ldr	r3, [pc, #88]	@ (800083c <RCC_SETCLK+0x108>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a15      	ldr	r2, [pc, #84]	@ (800083c <RCC_SETCLK+0x108>)
 80007e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80007ea:	6013      	str	r3, [r2, #0]
				while (((RCC->CR & (1 << PLLRDY)) == RCC_OFF) && (--TIME)); // Wait for HSI to stabilize
 80007ec:	bf00      	nop
 80007ee:	4b13      	ldr	r3, [pc, #76]	@ (800083c <RCC_SETCLK+0x108>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d114      	bne.n	8000824 <RCC_SETCLK+0xf0>
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	3b01      	subs	r3, #1
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d1f3      	bne.n	80007ee <RCC_SETCLK+0xba>
			}
			else
			{
				RCC->CR &= ~(1 << PLLON); // Disable PLL
			}
			break;
 8000806:	e00d      	b.n	8000824 <RCC_SETCLK+0xf0>
				RCC->CR &= ~(1 << PLLON); // Disable PLL
 8000808:	4b0c      	ldr	r3, [pc, #48]	@ (800083c <RCC_SETCLK+0x108>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a0b      	ldr	r2, [pc, #44]	@ (800083c <RCC_SETCLK+0x108>)
 800080e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000812:	6013      	str	r3, [r2, #0]
			break;
 8000814:	e006      	b.n	8000824 <RCC_SETCLK+0xf0>
		}
		default:
			RCC_ERRORSTATUS = RCC_ERRORSTATUS_NOT_OK; // Invalid clock type
 8000816:	2301      	movs	r3, #1
 8000818:	73fb      	strb	r3, [r7, #15]
 800081a:	e004      	b.n	8000826 <RCC_SETCLK+0xf2>
			break;
 800081c:	bf00      	nop
 800081e:	e002      	b.n	8000826 <RCC_SETCLK+0xf2>
			break;
 8000820:	bf00      	nop
 8000822:	e000      	b.n	8000826 <RCC_SETCLK+0xf2>
			break;
 8000824:	bf00      	nop
    }
    // Check if timeout occurred
    if (TIME == 0)
 8000826:	68bb      	ldr	r3, [r7, #8]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d101      	bne.n	8000830 <RCC_SETCLK+0xfc>
    {
        RCC_ERRORSTATUS = RCC_ERRORSTATUS_TIME_OUT;
 800082c:	2302      	movs	r3, #2
 800082e:	73fb      	strb	r3, [r7, #15]
    }

    return RCC_ERRORSTATUS;
 8000830:	7bfb      	ldrb	r3, [r7, #15]
}
 8000832:	4618      	mov	r0, r3
 8000834:	3714      	adds	r7, #20
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr
 800083c:	40023800 	.word	0x40023800

08000840 <RCC_SETSYSCLK>:


/******************selected  System clock switch**************OR*********************/
volatile uint32_t timeout = 0xFFFF;

void RCC_SETSYSCLK(uint8_t SYSCLK) {
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
        // Clear the SW[1:0] bits first

    RCC->CFGR &= ~(RCC_CFGR_SW_Msk);
 800084a:	4b11      	ldr	r3, [pc, #68]	@ (8000890 <RCC_SETSYSCLK+0x50>)
 800084c:	689b      	ldr	r3, [r3, #8]
 800084e:	4a10      	ldr	r2, [pc, #64]	@ (8000890 <RCC_SETSYSCLK+0x50>)
 8000850:	f023 0303 	bic.w	r3, r3, #3
 8000854:	6093      	str	r3, [r2, #8]

    // Set the new clock source
    RCC->CFGR |= (SYSCLK << SW_Pos);
 8000856:	4b0e      	ldr	r3, [pc, #56]	@ (8000890 <RCC_SETSYSCLK+0x50>)
 8000858:	689a      	ldr	r2, [r3, #8]
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	490c      	ldr	r1, [pc, #48]	@ (8000890 <RCC_SETSYSCLK+0x50>)
 800085e:	4313      	orrs	r3, r2
 8000860:	608b      	str	r3, [r1, #8]

    // Wait until the new system clock source is used
        while (((RCC->CFGR & RCC_CFGR_SWS_Msk) >>RCC_CFGR_SWS_Pos ) != SYSCLK){
 8000862:	e006      	b.n	8000872 <RCC_SETSYSCLK+0x32>
            if (--timeout == 0) break;
 8000864:	4b0b      	ldr	r3, [pc, #44]	@ (8000894 <RCC_SETSYSCLK+0x54>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	3b01      	subs	r3, #1
 800086a:	4a0a      	ldr	r2, [pc, #40]	@ (8000894 <RCC_SETSYSCLK+0x54>)
 800086c:	6013      	str	r3, [r2, #0]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d008      	beq.n	8000884 <RCC_SETSYSCLK+0x44>
        while (((RCC->CFGR & RCC_CFGR_SWS_Msk) >>RCC_CFGR_SWS_Pos ) != SYSCLK){
 8000872:	4b07      	ldr	r3, [pc, #28]	@ (8000890 <RCC_SETSYSCLK+0x50>)
 8000874:	689b      	ldr	r3, [r3, #8]
 8000876:	089b      	lsrs	r3, r3, #2
 8000878:	f003 0203 	and.w	r2, r3, #3
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	429a      	cmp	r2, r3
 8000880:	d1f0      	bne.n	8000864 <RCC_SETSYSCLK+0x24>
        }
    }
 8000882:	e000      	b.n	8000886 <RCC_SETSYSCLK+0x46>
            if (--timeout == 0) break;
 8000884:	bf00      	nop
    }
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr
 8000890:	40023800 	.word	0x40023800
 8000894:	20000024 	.word	0x20000024

08000898 <SystemCoreClockUpdate>:
/*dynamically calculates SystemCoreClock based on the current RCC register configuration.
 *  This is updated by the SystemCoreClockUpdate() function.
 *  ************************/

//
void SystemCoreClockUpdate(void) {
 8000898:	b480      	push	{r7}
 800089a:	b087      	sub	sp, #28
 800089c:	af00      	add	r7, sp, #0
    uint32_t tmp, pllm, pllvco, pllp;
    uint32_t sysclk_source;
/*This binary mask (0b1100) is used to isolate the SWS bits
 * when reading the RCC_CFGR registe*/
    sysclk_source = RCC->CFGR & RCC_CFGR_SWS_Msk ;
 800089e:	4b25      	ldr	r3, [pc, #148]	@ (8000934 <SystemCoreClockUpdate+0x9c>)
 80008a0:	689b      	ldr	r3, [r3, #8]
 80008a2:	f003 030c 	and.w	r3, r3, #12
 80008a6:	617b      	str	r3, [r7, #20]

    if (sysclk_source == RCC_CFGR_SWS_HSI) { // HSI used as system clock
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d103      	bne.n	80008b6 <SystemCoreClockUpdate+0x1e>
        SystemCoreClock = 16000000;
 80008ae:	4b22      	ldr	r3, [pc, #136]	@ (8000938 <SystemCoreClockUpdate+0xa0>)
 80008b0:	4a22      	ldr	r2, [pc, #136]	@ (800093c <SystemCoreClockUpdate+0xa4>)
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	e028      	b.n	8000908 <SystemCoreClockUpdate+0x70>

    } else if (sysclk_source == RCC_CFGR_SWS_HSE) { // HSE used as system clock
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d103      	bne.n	80008c4 <SystemCoreClockUpdate+0x2c>

    	SystemCoreClock = HSE_VALUE;
 80008bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000938 <SystemCoreClockUpdate+0xa0>)
 80008be:	4a20      	ldr	r2, [pc, #128]	@ (8000940 <SystemCoreClockUpdate+0xa8>)
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	e021      	b.n	8000908 <SystemCoreClockUpdate+0x70>


    } else if (sysclk_source == RCC_CFGR_SWS_PLL) { // PLL used as system clock
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	2b08      	cmp	r3, #8
 80008c8:	d11e      	bne.n	8000908 <SystemCoreClockUpdate+0x70>


    	/*OR  pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM_Msk)      >>  RCC_PLLCFGR_PLLM_Pos   );*/
    	pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM_Msk;
 80008ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000934 <SystemCoreClockUpdate+0x9c>)
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80008d2:	613b      	str	r3, [r7, #16]

        /*Getting the Actual PLLN Value: To get the value as an integer,
         *  you need to shift it to the right:
         * */
        pllvco = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN_Msk) >> RCC_PLLCFGR_PLLN_Pos) * (HSE_VALUE / pllm);
 80008d4:	4b17      	ldr	r3, [pc, #92]	@ (8000934 <SystemCoreClockUpdate+0x9c>)
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	099b      	lsrs	r3, r3, #6
 80008da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80008de:	4918      	ldr	r1, [pc, #96]	@ (8000940 <SystemCoreClockUpdate+0xa8>)
 80008e0:	693a      	ldr	r2, [r7, #16]
 80008e2:	fbb1 f2f2 	udiv	r2, r1, r2
 80008e6:	fb02 f303 	mul.w	r3, r2, r3
 80008ea:	60fb      	str	r3, [r7, #12]

        /*If the bits are 01 (encoded as 1), the calculation becomes (1 + 1) * 2 = 4   Result: pllp = 4.*/
        pllp = (((RCC->PLLCFGR & PLLCFGR_PLLP) >> PLLP_Pos) + 1) * 2;
 80008ec:	4b11      	ldr	r3, [pc, #68]	@ (8000934 <SystemCoreClockUpdate+0x9c>)
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	0c1b      	lsrs	r3, r3, #16
 80008f2:	f003 0303 	and.w	r3, r3, #3
 80008f6:	3301      	adds	r3, #1
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	60bb      	str	r3, [r7, #8]

        SystemCoreClock = pllvco / pllp;
 80008fc:	68fa      	ldr	r2, [r7, #12]
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	fbb2 f3f3 	udiv	r3, r2, r3
 8000904:	4a0c      	ldr	r2, [pc, #48]	@ (8000938 <SystemCoreClockUpdate+0xa0>)
 8000906:	6013      	str	r3, [r2, #0]




    /*Bits 7:4 HPRE: AHB prescaler  ************************************/
    tmp = ((RCC->CFGR & RCC_CFGR_AHB_MSK) >> RCC_CFGR_AHB_Pos);
 8000908:	4b0a      	ldr	r3, [pc, #40]	@ (8000934 <SystemCoreClockUpdate+0x9c>)
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	091b      	lsrs	r3, r3, #4
 800090e:	f003 030f 	and.w	r3, r3, #15
 8000912:	607b      	str	r3, [r7, #4]
/*If tmp is 8 or greater, the AHB clock is divided.
The division factor is determined by (tmp - 0x07). */
    if (    tmp >= 0x08    ) {
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2b07      	cmp	r3, #7
 8000918:	d907      	bls.n	800092a <SystemCoreClockUpdate+0x92>

        SystemCoreClock >>= (tmp - 0x07);
 800091a:	4b07      	ldr	r3, [pc, #28]	@ (8000938 <SystemCoreClockUpdate+0xa0>)
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	3b07      	subs	r3, #7
 8000922:	fa22 f303 	lsr.w	r3, r2, r3
 8000926:	4a04      	ldr	r2, [pc, #16]	@ (8000938 <SystemCoreClockUpdate+0xa0>)
 8000928:	6013      	str	r3, [r2, #0]
    }
}
 800092a:	bf00      	nop
 800092c:	371c      	adds	r7, #28
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr
 8000934:	40023800 	.word	0x40023800
 8000938:	20000020 	.word	0x20000020
 800093c:	00f42400 	.word	0x00f42400
 8000940:	007a1200 	.word	0x007a1200

08000944 <RCC_AHB1_enable>:

/************************************************************************/
/****************** AHB1 peripheral clock enable&disabled*********************************/


void RCC_AHB1_enable(uint32_t peripheral){
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	RCC->AHB1ENR |=(1 << peripheral);
 800094c:	4b07      	ldr	r3, [pc, #28]	@ (800096c <RCC_AHB1_enable+0x28>)
 800094e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000950:	2101      	movs	r1, #1
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	fa01 f202 	lsl.w	r2, r1, r2
 8000958:	4611      	mov	r1, r2
 800095a:	4a04      	ldr	r2, [pc, #16]	@ (800096c <RCC_AHB1_enable+0x28>)
 800095c:	430b      	orrs	r3, r1
 800095e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000960:	bf00      	nop
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	40023800 	.word	0x40023800

08000970 <RCC_APB1_enable>:
}
/************************************************************************/


/****************APB1 peripheral clock enable&disabled**************************/
void RCC_APB1_enable(uint32_t peripheral){
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	RCC->APB1ENR |=(1 << peripheral);
 8000978:	4b07      	ldr	r3, [pc, #28]	@ (8000998 <RCC_APB1_enable+0x28>)
 800097a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097c:	2101      	movs	r1, #1
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	fa01 f202 	lsl.w	r2, r1, r2
 8000984:	4611      	mov	r1, r2
 8000986:	4a04      	ldr	r2, [pc, #16]	@ (8000998 <RCC_APB1_enable+0x28>)
 8000988:	430b      	orrs	r3, r1
 800098a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800098c:	bf00      	nop
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	bc80      	pop	{r7}
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800

0800099c <SysTick_Init>:


volatile uint32_t tick_count = 0;


void SysTick_Init(ProcessorDIV Processor) {
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
    // Set reload value for 1ms==1000sec tick     // Configure SysTick for 1 ms interrupts

	SysTick->LOAD = SystemCoreClock / 1000 - 1; /*SystemCoreClock=80MHZ*/
 80009a6:	4b16      	ldr	r3, [pc, #88]	@ (8000a00 <SysTick_Init+0x64>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4a16      	ldr	r2, [pc, #88]	@ (8000a04 <SysTick_Init+0x68>)
 80009ac:	fba2 2303 	umull	r2, r3, r2, r3
 80009b0:	099b      	lsrs	r3, r3, #6
 80009b2:	4a15      	ldr	r2, [pc, #84]	@ (8000a08 <SysTick_Init+0x6c>)
 80009b4:	3b01      	subs	r3, #1
 80009b6:	6053      	str	r3, [r2, #4]

    SysTick->VAL = 0;  // Reset the current value
 80009b8:	4b13      	ldr	r3, [pc, #76]	@ (8000a08 <SysTick_Init+0x6c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]

    // Configure the SysTick timer

    if(Processor == 1 ){
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d106      	bne.n	80009d2 <SysTick_Init+0x36>
    	/*Selecting the Processor Clock (HCLK)*/
    SysTick ->CTRL |=(   1 << CLKSOURCE );  /*Use processor clock*/
 80009c4:	4b10      	ldr	r3, [pc, #64]	@ (8000a08 <SysTick_Init+0x6c>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a0f      	ldr	r2, [pc, #60]	@ (8000a08 <SysTick_Init+0x6c>)
 80009ca:	f043 0304 	orr.w	r3, r3, #4
 80009ce:	6013      	str	r3, [r2, #0]
 80009d0:	e005      	b.n	80009de <SysTick_Init+0x42>
    }else{
    	/*Selecting the External Clock (HCLK/8):
    	To clear the CLKSOURCE bit*/
    	SysTick ->CTRL &=~(   1 << CLKSOURCE );
 80009d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000a08 <SysTick_Init+0x6c>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a0c      	ldr	r2, [pc, #48]	@ (8000a08 <SysTick_Init+0x6c>)
 80009d8:	f023 0304 	bic.w	r3, r3, #4
 80009dc:	6013      	str	r3, [r2, #0]
    }

    SysTick ->CTRL |=(   1 << TICKINT ); /*Enable interrupt*/
 80009de:	4b0a      	ldr	r3, [pc, #40]	@ (8000a08 <SysTick_Init+0x6c>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a09      	ldr	r2, [pc, #36]	@ (8000a08 <SysTick_Init+0x6c>)
 80009e4:	f043 0302 	orr.w	r3, r3, #2
 80009e8:	6013      	str	r3, [r2, #0]
	SysTick ->CTRL |=(   1 << ENABLE );  /*Enable SysTick*/
 80009ea:	4b07      	ldr	r3, [pc, #28]	@ (8000a08 <SysTick_Init+0x6c>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a06      	ldr	r2, [pc, #24]	@ (8000a08 <SysTick_Init+0x6c>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6013      	str	r3, [r2, #0]
}
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr
 8000a00:	20000020 	.word	0x20000020
 8000a04:	10624dd3 	.word	0x10624dd3
 8000a08:	e000e010 	.word	0xe000e010

08000a0c <SysTick_Handler>:


/**
 * @brief SysTick interrupt handler.
 */
void SysTick_Handler(void) {
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
    tick_count++;
 8000a10:	4b04      	ldr	r3, [pc, #16]	@ (8000a24 <SysTick_Handler+0x18>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	3301      	adds	r3, #1
 8000a16:	4a03      	ldr	r2, [pc, #12]	@ (8000a24 <SysTick_Handler+0x18>)
 8000a18:	6013      	str	r3, [r2, #0]
}
 8000a1a:	bf00      	nop
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bc80      	pop	{r7}
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	20000044 	.word	0x20000044

08000a28 <USART_ConfigMode>:

/*  USART_ConfigMode(USART1, RX_TX);    */


void USART_ConfigMode(USART_RegDef_t *USARTx, USART_Mode mode)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	460b      	mov	r3, r1
 8000a32:	70fb      	strb	r3, [r7, #3]
    // RE و TE
    USARTx->CR1 &= ~((1 << RE) | (1 << TE));
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	f023 020c 	bic.w	r2, r3, #12
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	60da      	str	r2, [r3, #12]

    switch (mode)
 8000a40:	78fb      	ldrb	r3, [r7, #3]
 8000a42:	2b02      	cmp	r3, #2
 8000a44:	d014      	beq.n	8000a70 <USART_ConfigMode+0x48>
 8000a46:	2b02      	cmp	r3, #2
 8000a48:	dc19      	bgt.n	8000a7e <USART_ConfigMode+0x56>
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d002      	beq.n	8000a54 <USART_ConfigMode+0x2c>
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d007      	beq.n	8000a62 <USART_ConfigMode+0x3a>
            break;
        case RX_TX:
            USARTx->CR1 |= (1 << RE) | (1 << TE);
            break;
    }
}
 8000a52:	e014      	b.n	8000a7e <USART_ConfigMode+0x56>
            USARTx->CR1 |= (1 << RE);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	f043 0204 	orr.w	r2, r3, #4
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	60da      	str	r2, [r3, #12]
            break;
 8000a60:	e00d      	b.n	8000a7e <USART_ConfigMode+0x56>
            USARTx->CR1 |= (1 << TE);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	68db      	ldr	r3, [r3, #12]
 8000a66:	f043 0208 	orr.w	r2, r3, #8
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	60da      	str	r2, [r3, #12]
            break;
 8000a6e:	e006      	b.n	8000a7e <USART_ConfigMode+0x56>
            USARTx->CR1 |= (1 << RE) | (1 << TE);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	f043 020c 	orr.w	r2, r3, #12
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	60da      	str	r2, [r3, #12]
            break;
 8000a7c:	bf00      	nop
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr

08000a88 <USART_DMA_StartRx>:
    USARTx->CR3 |= (1 <<  DMAT);             //DMAT: DMA Transmit (bit 7)

}

void USART_DMA_StartRx(USART_RegDef_t *USARTx)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
    USARTx->CR3 |= (1 <<  DMAR);             //  DMAR: DMA Receive (bit 6)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	695b      	ldr	r3, [r3, #20]
 8000a94:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	615a      	str	r2, [r3, #20]
}
 8000a9c:	bf00      	nop
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr
	...

08000aa8 <USART_Init>:

/*USART_Init(USART1, 9600, 16000000, 16); //  USART1 ---9600--------- MHz16    oversampling    8&16*/


void USART_Init(USART_RegDef_t *USARTx, uint32_t baud_rate, uint32_t PCLKx, uint8_t over)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b089      	sub	sp, #36	@ 0x24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
 8000ab4:	70fb      	strb	r3, [r7, #3]
    // ـ oversampling (8-----أ16)
    if (over == 8)
 8000ab6:	78fb      	ldrb	r3, [r7, #3]
 8000ab8:	2b08      	cmp	r3, #8
 8000aba:	d106      	bne.n	8000aca <USART_Init+0x22>
    {
        USARTx->CR1 |= (1 << OVER8);  // oversampling 8
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	60da      	str	r2, [r3, #12]
 8000ac8:	e007      	b.n	8000ada <USART_Init+0x32>
    }
    else
    {
        USARTx->CR1 &= ~(1 << OVER8); // oversampling  16
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	68db      	ldr	r3, [r3, #12]
 8000ace:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	60da      	str	r2, [r3, #12]
        over = 16;
 8000ad6:	2310      	movs	r3, #16
 8000ad8:	70fb      	strb	r3, [r7, #3]
    }

    // USARTDIV
    // over = 8 => divisor = PCLKx / (8 * baud_rate)
    // over = 16 => divisor = PCLKx / (16 * baud_rate)
    uint32_t usartdiv_multiplied = (PCLKx * 100) / (baud_rate * over);  // *100
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2264      	movs	r2, #100	@ 0x64
 8000ade:	fb03 f202 	mul.w	r2, r3, r2
 8000ae2:	78fb      	ldrb	r3, [r7, #3]
 8000ae4:	68b9      	ldr	r1, [r7, #8]
 8000ae6:	fb01 f303 	mul.w	r3, r1, r3
 8000aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aee:	617b      	str	r3, [r7, #20]
    uint32_t mantissa = usartdiv_multiplied / 100;
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	4a19      	ldr	r2, [pc, #100]	@ (8000b58 <USART_Init+0xb0>)
 8000af4:	fba2 2303 	umull	r2, r3, r2, r3
 8000af8:	095b      	lsrs	r3, r3, #5
 8000afa:	61fb      	str	r3, [r7, #28]
    uint32_t fraction = (((usartdiv_multiplied - (mantissa * 100)) * over + 50) / 100);
 8000afc:	69fb      	ldr	r3, [r7, #28]
 8000afe:	2264      	movs	r2, #100	@ 0x64
 8000b00:	fb02 f303 	mul.w	r3, r2, r3
 8000b04:	697a      	ldr	r2, [r7, #20]
 8000b06:	1ad3      	subs	r3, r2, r3
 8000b08:	78fa      	ldrb	r2, [r7, #3]
 8000b0a:	fb02 f303 	mul.w	r3, r2, r3
 8000b0e:	3332      	adds	r3, #50	@ 0x32
 8000b10:	4a11      	ldr	r2, [pc, #68]	@ (8000b58 <USART_Init+0xb0>)
 8000b12:	fba2 2303 	umull	r2, r3, r2, r3
 8000b16:	095b      	lsrs	r3, r3, #5
 8000b18:	61bb      	str	r3, [r7, #24]

    // fraction :
    if (fraction > (over - 1))
 8000b1a:	78fb      	ldrb	r3, [r7, #3]
 8000b1c:	3b01      	subs	r3, #1
 8000b1e:	461a      	mov	r2, r3
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d904      	bls.n	8000b30 <USART_Init+0x88>
    {
        fraction = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61bb      	str	r3, [r7, #24]
        mantissa += 1;
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	61fb      	str	r3, [r7, #28]
    }

    // BRR
    USARTx->BRR = (mantissa << 4) | (fraction & 0x0F);
 8000b30:	69fb      	ldr	r3, [r7, #28]
 8000b32:	011a      	lsls	r2, r3, #4
 8000b34:	69bb      	ldr	r3, [r7, #24]
 8000b36:	f003 030f 	and.w	r3, r3, #15
 8000b3a:	431a      	orrs	r2, r3
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	609a      	str	r2, [r3, #8]

    // USART
    USARTx->CR1 |= (1 << UE);
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	60da      	str	r2, [r3, #12]


}
 8000b4c:	bf00      	nop
 8000b4e:	3724      	adds	r7, #36	@ 0x24
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	51eb851f 	.word	0x51eb851f

08000b5c <USART_SendChar>:


/**/

void USART_SendChar(USART_RegDef_t *USARTx, uint8_t data)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	460b      	mov	r3, r1
 8000b66:	70fb      	strb	r3, [r7, #3]
// Wait until the send register is empty (TXE = 1)
 while (!(USARTx->SR & (1 << TXE))); // TXE bit
 8000b68:	bf00      	nop
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d0f9      	beq.n	8000b6a <USART_SendChar+0xe>

 USARTx->DR = data; // Send data
 8000b76:	78fa      	ldrb	r2, [r7, #3]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	605a      	str	r2, [r3, #4]

// Wait until the send is complete (TC = 1)
 while (!(USARTx->SR & (1 << TC))); // TC bit
 8000b7c:	bf00      	nop
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d0f9      	beq.n	8000b7e <USART_SendChar+0x22>
}
 8000b8a:	bf00      	nop
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bc80      	pop	{r7}
 8000b94:	4770      	bx	lr

08000b96 <USART_SendString>:
return (uint8_t)(USARTx->DR & 0xFF); // Read the received data
}


void USART_SendString(USART_RegDef_t *USARTx, const char *str)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b082      	sub	sp, #8
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
 8000b9e:	6039      	str	r1, [r7, #0]
    while (*str)
 8000ba0:	e008      	b.n	8000bb4 <USART_SendString+0x1e>
    {
        USART_SendChar(USARTx, (uint8_t)*str);
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f7ff ffd7 	bl	8000b5c <USART_SendChar>
        str++;
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	603b      	str	r3, [r7, #0]
    while (*str)
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d1f2      	bne.n	8000ba2 <USART_SendString+0xc>
    }
}
 8000bbc:	bf00      	nop
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
    // Read data register not empty  RXNE
    if (USART1->SR & (1 << RXNE))  // RXNE
 8000bce:	4b0e      	ldr	r3, [pc, #56]	@ (8000c08 <USART1_IRQHandler+0x40>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f003 0320 	and.w	r3, r3, #32
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d005      	beq.n	8000be6 <USART1_IRQHandler+0x1e>
    {
        uint8_t received = USART1->DR & 0xFF;
 8000bda:	4b0b      	ldr	r3, [pc, #44]	@ (8000c08 <USART1_IRQHandler+0x40>)
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	71fb      	strb	r3, [r7, #7]

        //resend the letter directly (echo)
        USART1->DR = received;
 8000be0:	4a09      	ldr	r2, [pc, #36]	@ (8000c08 <USART1_IRQHandler+0x40>)
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	6053      	str	r3, [r2, #4]
    }

    // End transmission (optional)
    if (USART1->SR & (1 << TC)) // TC
 8000be6:	4b08      	ldr	r3, [pc, #32]	@ (8000c08 <USART1_IRQHandler+0x40>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d005      	beq.n	8000bfe <USART1_IRQHandler+0x36>
    {
    // Transmission can be stopped or the application notified
    USART1->SR &= ~(1 << TC); // Clear the flag by reading SR then DR
 8000bf2:	4b05      	ldr	r3, [pc, #20]	@ (8000c08 <USART1_IRQHandler+0x40>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a04      	ldr	r2, [pc, #16]	@ (8000c08 <USART1_IRQHandler+0x40>)
 8000bf8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000bfc:	6013      	str	r3, [r2, #0]
    }
}
 8000bfe:	bf00      	nop
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr
 8000c08:	40011000 	.word	0x40011000

08000c0c <main>:

#define RX_BUFFER_SIZE 64
char rx_buffer[RX_BUFFER_SIZE];

int main(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b0ba      	sub	sp, #232	@ 0xe8
 8000c10:	af00      	add	r7, sp, #0



	char msg[] = "Hello from Nucleo-F446RE USART2!\r\nSend '1' to turn LED ON, '0' to turn LED OFF.\r\n";
 8000c12:	4a6e      	ldr	r2, [pc, #440]	@ (8000dcc <main+0x1c0>)
 8000c14:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000c18:	4611      	mov	r1, r2
 8000c1a:	2252      	movs	r2, #82	@ 0x52
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f000 f93f 	bl	8000ea0 <memcpy>


	 RCC_SETCLK(HSI,RCC_ON);
 8000c22:	2101      	movs	r1, #1
 8000c24:	2000      	movs	r0, #0
 8000c26:	f7ff fd85 	bl	8000734 <RCC_SETCLK>
	    RCC_SETSYSCLK(SW_HSI);  /* Switch system clock to PLL*/
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f7ff fe08 	bl	8000840 <RCC_SETSYSCLK>
	    SystemCoreClockUpdate();   /* Update core clock variable*/
 8000c30:	f7ff fe32 	bl	8000898 <SystemCoreClockUpdate>
	 	SysTick_Init(ProcessorAHB); /* Initialize SysTick with new frequency*/
 8000c34:	2001      	movs	r0, #1
 8000c36:	f7ff feb1 	bl	800099c <SysTick_Init>

		RCC_AHB1_enable(GPIOAEN);   /* Enable GPIOA لـ USART2*/
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	f7ff fe82 	bl	8000944 <RCC_AHB1_enable>
		RCC_AHB1_enable(DMA1EN);      /* DMA1 for USART2 */
 8000c40:	2015      	movs	r0, #21
 8000c42:	f7ff fe7f 	bl	8000944 <RCC_AHB1_enable>
		RCC_APB1_enable(USART2EN);  /*     USART2*/
 8000c46:	2011      	movs	r0, #17
 8000c48:	f7ff fe92 	bl	8000970 <RCC_APB1_enable>


		    pin_configer_t USART2_PA2_TX={
 8000c4c:	4a60      	ldr	r2, [pc, #384]	@ (8000dd0 <main+0x1c4>)
 8000c4e:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000c52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c56:	6018      	str	r0, [r3, #0]
 8000c58:	3304      	adds	r3, #4
 8000c5a:	8019      	strh	r1, [r3, #0]
 8000c5c:	3302      	adds	r3, #2
 8000c5e:	0c0a      	lsrs	r2, r1, #16
 8000c60:	701a      	strb	r2, [r3, #0]
		    .speed=LOW,
		    .outputtype=PUSH_PULL,
		    .pulltype=NOPULL
		    };

		    GPIO_u8pininit(&USART2_PA2_TX);
 8000c62:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff fbd6 	bl	8000418 <GPIO_u8pininit>

		    pin_configer_t LED_PA5={
 8000c6c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	f8c3 2003 	str.w	r2, [r3, #3]
 8000c78:	2305      	movs	r3, #5
 8000c7a:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
 8000c7e:	2301      	movs	r3, #1
 8000c80:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
		 		    .speed=LOW,
		 		    .outputtype=PUSH_PULL,
		 		    .pulltype=NOPULL
		 		    };

		 		   GPIO_u8pininit(&LED_PA5);
 8000c84:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fbc5 	bl	8000418 <GPIO_u8pininit>


		    pin_configer_t USART2_PA3_RX={
 8000c8e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	f8c3 2003 	str.w	r2, [r3, #3]
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 8000cac:	2307      	movs	r3, #7
 8000cae:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
			 .mode=ALTERNATE_FUNCTION,
			.altfunc=AF7,
		    .pulltype=PULLUP
		    };

		    GPIO_u8pininit(&USART2_PA3_RX);
 8000cb2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff fbae 	bl	8000418 <GPIO_u8pininit>


		    USART_Init(USART2, 9600, 16000000, 16);
 8000cbc:	2310      	movs	r3, #16
 8000cbe:	4a45      	ldr	r2, [pc, #276]	@ (8000dd4 <main+0x1c8>)
 8000cc0:	f44f 5116 	mov.w	r1, #9600	@ 0x2580
 8000cc4:	4844      	ldr	r0, [pc, #272]	@ (8000dd8 <main+0x1cc>)
 8000cc6:	f7ff feef 	bl	8000aa8 <USART_Init>
		  // USART_ConfigMode(USART2, TX_ONLY);
		    USART_ConfigMode(USART2, RX_TX);
 8000cca:	2102      	movs	r1, #2
 8000ccc:	4842      	ldr	r0, [pc, #264]	@ (8000dd8 <main+0x1cc>)
 8000cce:	f7ff feab 	bl	8000a28 <USART_ConfigMode>
		   USART_SendString(USART2, msg);
 8000cd2:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	483f      	ldr	r0, [pc, #252]	@ (8000dd8 <main+0x1cc>)
 8000cda:	f7ff ff5c 	bl	8000b96 <USART_SendString>



  			USART_SendString(USART2, "Testing TX UART2 RX DMA\r\n");
 8000cde:	493f      	ldr	r1, [pc, #252]	@ (8000ddc <main+0x1d0>)
 8000ce0:	483d      	ldr	r0, [pc, #244]	@ (8000dd8 <main+0x1cc>)
 8000ce2:	f7ff ff58 	bl	8000b96 <USART_SendString>


  			char rx_buffer[64];

  			// DMA Config
  			DMA_Config_t usart2_rx_dma = {
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	222c      	movs	r2, #44	@ 0x2c
 8000cea:	2100      	movs	r1, #0
 8000cec:	4618      	mov	r0, r3
 8000cee:	f000 f8aa 	bl	8000e46 <memset>
 8000cf2:	2305      	movs	r3, #5
 8000cf4:	713b      	strb	r3, [r7, #4]
 8000cf6:	4b3a      	ldr	r3, [pc, #232]	@ (8000de0 <main+0x1d4>)
 8000cf8:	60bb      	str	r3, [r7, #8]
 8000cfa:	4b3a      	ldr	r3, [pc, #232]	@ (8000de4 <main+0x1d8>)
 8000cfc:	60fb      	str	r3, [r7, #12]
  			    .streamID = DMA1_STREAM5,
  			    .stream = &MY_DMA1->DMA_Stream[5],
  			    .channel = DMA_CHANNEL_4,
  			    .periphAddr = (uint32_t)&USART2->DR,
  			    .memAddr = (uint32_t)rx_buffer,
 8000cfe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
  			DMA_Config_t usart2_rx_dma = {
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	2340      	movs	r3, #64	@ 0x40
 8000d06:	61bb      	str	r3, [r7, #24]
 8000d08:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d0c:	623b      	str	r3, [r7, #32]
 8000d0e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000d14:	2301      	movs	r3, #1
 8000d16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f



  			};

  			DMA_Init(&usart2_rx_dma);
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fa71 	bl	8000204 <DMA_Init>


  			DMA_EnableStream(DMA1_STREAM5);
 8000d22:	2005      	movs	r0, #5
 8000d24:	f7ff fb3c 	bl	80003a0 <DMA_EnableStream>
  			// Enable USART2 DMA receiver
  			//USART2->CR3 |= (1 <<  DMAR);
  			USART_DMA_StartRx(USART2);
 8000d28:	482b      	ldr	r0, [pc, #172]	@ (8000dd8 <main+0x1cc>)
 8000d2a:	f7ff fead 	bl	8000a88 <USART_DMA_StartRx>



  			int old_pos = 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

  			while (1)
  			{
  			    int current_pos = RX_BUFFER_SIZE - MY_DMA1->DMA_Stream[5].NDTR;
 8000d34:	4b2c      	ldr	r3, [pc, #176]	@ (8000de8 <main+0x1dc>)
 8000d36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d3a:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000d3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  			    if (current_pos != old_pos)
 8000d42:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	d0f2      	beq.n	8000d34 <main+0x128>
  			    {
  			        for (int i = old_pos; i != current_pos; i = (i + 1) % RX_BUFFER_SIZE)
 8000d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000d52:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8000d56:	e02e      	b.n	8000db6 <main+0x1aa>
  			        {
  			            char received = rx_buffer[i];
 8000d58:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000d60:	4413      	add	r3, r2
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb

  			            if (received == '1') {
 8000d68:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8000d6c:	2b31      	cmp	r3, #49	@ 0x31
 8000d6e:	d109      	bne.n	8000d84 <main+0x178>
  			                GPIO_u8setpinvalue(PORTA, PIN5, PIN_HIGH);
 8000d70:	2201      	movs	r2, #1
 8000d72:	2105      	movs	r1, #5
 8000d74:	2000      	movs	r0, #0
 8000d76:	f7ff fc95 	bl	80006a4 <GPIO_u8setpinvalue>
  			                USART_SendString(USART2, "LED ON\r\n");
 8000d7a:	491c      	ldr	r1, [pc, #112]	@ (8000dec <main+0x1e0>)
 8000d7c:	4816      	ldr	r0, [pc, #88]	@ (8000dd8 <main+0x1cc>)
 8000d7e:	f7ff ff0a 	bl	8000b96 <USART_SendString>
 8000d82:	e00c      	b.n	8000d9e <main+0x192>
  			            } else if (received == '0') {
 8000d84:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8000d88:	2b30      	cmp	r3, #48	@ 0x30
 8000d8a:	d108      	bne.n	8000d9e <main+0x192>
  			                GPIO_u8setpinvalue(PORTA, PIN5, PIN_LOW);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2105      	movs	r1, #5
 8000d90:	2000      	movs	r0, #0
 8000d92:	f7ff fc87 	bl	80006a4 <GPIO_u8setpinvalue>
  			                USART_SendString(USART2, "LED OFF\r\n");
 8000d96:	4916      	ldr	r1, [pc, #88]	@ (8000df0 <main+0x1e4>)
 8000d98:	480f      	ldr	r0, [pc, #60]	@ (8000dd8 <main+0x1cc>)
 8000d9a:	f7ff fefc 	bl	8000b96 <USART_SendString>
  			        for (int i = old_pos; i != current_pos; i = (i + 1) % RX_BUFFER_SIZE)
 8000d9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000da2:	3301      	adds	r3, #1
 8000da4:	425a      	negs	r2, r3
 8000da6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000daa:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000dae:	bf58      	it	pl
 8000db0:	4253      	negpl	r3, r2
 8000db2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8000db6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000dba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d1ca      	bne.n	8000d58 <main+0x14c>
  			            }
  			        }

  			        old_pos = current_pos;
 8000dc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000dc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  			{
 8000dca:	e7b3      	b.n	8000d34 <main+0x128>
 8000dcc:	08000f08 	.word	0x08000f08
 8000dd0:	08000f5c 	.word	0x08000f5c
 8000dd4:	00f42400 	.word	0x00f42400
 8000dd8:	40004400 	.word	0x40004400
 8000ddc:	08000ed4 	.word	0x08000ed4
 8000de0:	40026088 	.word	0x40026088
 8000de4:	40004404 	.word	0x40004404
 8000de8:	40026000 	.word	0x40026000
 8000dec:	08000ef0 	.word	0x08000ef0
 8000df0:	08000efc 	.word	0x08000efc

08000df4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000df4:	480d      	ldr	r0, [pc, #52]	@ (8000e2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000df6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000df8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dfc:	480c      	ldr	r0, [pc, #48]	@ (8000e30 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dfe:	490d      	ldr	r1, [pc, #52]	@ (8000e34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e00:	4a0d      	ldr	r2, [pc, #52]	@ (8000e38 <LoopForever+0xe>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e04:	e002      	b.n	8000e0c <LoopCopyDataInit>

08000e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0a:	3304      	adds	r3, #4

08000e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e10:	d3f9      	bcc.n	8000e06 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e12:	4a0a      	ldr	r2, [pc, #40]	@ (8000e3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e14:	4c0a      	ldr	r4, [pc, #40]	@ (8000e40 <LoopForever+0x16>)
  movs r3, #0
 8000e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e18:	e001      	b.n	8000e1e <LoopFillZerobss>

08000e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e1c:	3204      	adds	r2, #4

08000e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e20:	d3fb      	bcc.n	8000e1a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e22:	f000 f819 	bl	8000e58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e26:	f7ff fef1 	bl	8000c0c <main>

08000e2a <LoopForever>:

LoopForever:
  b LoopForever
 8000e2a:	e7fe      	b.n	8000e2a <LoopForever>
  ldr   r0, =_estack
 8000e2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e34:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8000e38:	08000f7c 	.word	0x08000f7c
  ldr r2, =_sbss
 8000e3c:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000e40:	20000048 	.word	0x20000048

08000e44 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e44:	e7fe      	b.n	8000e44 <ADC_IRQHandler>

08000e46 <memset>:
 8000e46:	4402      	add	r2, r0
 8000e48:	4603      	mov	r3, r0
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d100      	bne.n	8000e50 <memset+0xa>
 8000e4e:	4770      	bx	lr
 8000e50:	f803 1b01 	strb.w	r1, [r3], #1
 8000e54:	e7f9      	b.n	8000e4a <memset+0x4>
	...

08000e58 <__libc_init_array>:
 8000e58:	b570      	push	{r4, r5, r6, lr}
 8000e5a:	4d0d      	ldr	r5, [pc, #52]	@ (8000e90 <__libc_init_array+0x38>)
 8000e5c:	4c0d      	ldr	r4, [pc, #52]	@ (8000e94 <__libc_init_array+0x3c>)
 8000e5e:	1b64      	subs	r4, r4, r5
 8000e60:	10a4      	asrs	r4, r4, #2
 8000e62:	2600      	movs	r6, #0
 8000e64:	42a6      	cmp	r6, r4
 8000e66:	d109      	bne.n	8000e7c <__libc_init_array+0x24>
 8000e68:	4d0b      	ldr	r5, [pc, #44]	@ (8000e98 <__libc_init_array+0x40>)
 8000e6a:	4c0c      	ldr	r4, [pc, #48]	@ (8000e9c <__libc_init_array+0x44>)
 8000e6c:	f000 f826 	bl	8000ebc <_init>
 8000e70:	1b64      	subs	r4, r4, r5
 8000e72:	10a4      	asrs	r4, r4, #2
 8000e74:	2600      	movs	r6, #0
 8000e76:	42a6      	cmp	r6, r4
 8000e78:	d105      	bne.n	8000e86 <__libc_init_array+0x2e>
 8000e7a:	bd70      	pop	{r4, r5, r6, pc}
 8000e7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e80:	4798      	blx	r3
 8000e82:	3601      	adds	r6, #1
 8000e84:	e7ee      	b.n	8000e64 <__libc_init_array+0xc>
 8000e86:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e8a:	4798      	blx	r3
 8000e8c:	3601      	adds	r6, #1
 8000e8e:	e7f2      	b.n	8000e76 <__libc_init_array+0x1e>
 8000e90:	08000f74 	.word	0x08000f74
 8000e94:	08000f74 	.word	0x08000f74
 8000e98:	08000f74 	.word	0x08000f74
 8000e9c:	08000f78 	.word	0x08000f78

08000ea0 <memcpy>:
 8000ea0:	440a      	add	r2, r1
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ea8:	d100      	bne.n	8000eac <memcpy+0xc>
 8000eaa:	4770      	bx	lr
 8000eac:	b510      	push	{r4, lr}
 8000eae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000eb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000eb6:	4291      	cmp	r1, r2
 8000eb8:	d1f9      	bne.n	8000eae <memcpy+0xe>
 8000eba:	bd10      	pop	{r4, pc}

08000ebc <_init>:
 8000ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ebe:	bf00      	nop
 8000ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ec2:	bc08      	pop	{r3}
 8000ec4:	469e      	mov	lr, r3
 8000ec6:	4770      	bx	lr

08000ec8 <_fini>:
 8000ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eca:	bf00      	nop
 8000ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ece:	bc08      	pop	{r3}
 8000ed0:	469e      	mov	lr, r3
 8000ed2:	4770      	bx	lr
